# Project setup
###############

cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

project(ViennaCL)

SET(VIENNACL_SRC_DIST ON)


#
# User customizations if CMake does not find Boost or OpenCL
#

# Set boost path here if not found automatically by CMake
#SET(BOOST_ROOT "C:/Program\ Files\ (x86)/boost/boost_1_42")     # adjust this on Windows
#SET(BOOST_ROOT "/opt/local/include")                            # adjust this on MacOS or Linux

# For out-of-the-box support on MacOS:
IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  INCLUDE_DIRECTORIES("/opt/local/include")
  set(CMAKE_EXE_LINKER_FLAGS "-framework OpenCL")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")


# Common options - There is usually no need to change anything below this line
################

set(VERSION_MAJOR @VERSION_MAJOR@)
set(VERSION_MINOR @VERSION_MINOR@)
set(VERSION_PATCH @VERSION_PATCH@)
set(VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})

list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

include(ViennaCLCommon)

# Set release build:
IF(DEFINED CMAKE_BUILD_TYPE)
 SET (CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE})
ELSE()
 SET (CMAKE_BUILD_TYPE Release)
ENDIF()

# User options
##############

option(BUILD_PYVIENNACL "Build PyViennaCL" ON)

option(BUILD_DOXYGEN_DOCS "Build the Doxygen-generated ViennaCL API docs" OFF)

option(BUILD_MANUAL "Build the ViennaCL PDF manual" OFF)

mark_as_advanced(BUILD_DOXYGEN_DOCS BUILD_MANUAL)

# Find prerequisites
####################

if(BUILD_DOXYGEN_DOCS)
   find_package(Doxygen REQUIRED)
endif()

if(BUILD_MANUAL)
   find_package(LATEX REQUIRED)
endif()

if(BUILD_PYVIENNACL)
  if(NOT DEFINED PYTHON_EXECUTABLE)
    set(
      PYTHON_EXECUTABLE "python"
      CACHE STRING
      "Change this to the path for your interpreter; for instance 'python3'")
  endif()
  execute_process(
    COMMAND "${PYTHON_EXECUTABLE}" ${CMAKE_SOURCE_DIR}/pyviennacl/pyversions.py python
    OUTPUT_VARIABLE PYVERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
    )
  execute_process(
    COMMAND "${PYTHON_EXECUTABLE}" ${CMAKE_SOURCE_DIR}/pyviennacl/pyversions.py boost
    OUTPUT_VARIABLE BOOST_COMPONENTS
    OUTPUT_STRIP_TRAILING_WHITESPACE
    )
  #set(Python_ADDITIONAL_VERSIONS ${PYVERSION})
  find_package(PythonInterp ${PYVERSION} EXACT)
  #message(${PYTHON_VERSION_STRING})
  if(DEFINED PYTHON_INCLUDE_DIR AND NOT DEFINED PYTHON_INCLUDE_DIR2)
    set(PYTHON_INCLUDE_DIR2 ${PYTHON_INCLUDE_DIR})
  endif()
  find_package(PythonLibs ${PYTHON_VERSION_STRING} EXACT)
  find_package(Numpy REQUIRED)
endif()

# Compile options
#################

include_directories(BEFORE ${PROJECT_SOURCE_DIR})

# Subdirectories
################

#if(BUILD_EXAMPLES)
#   add_subdirectory(examples)
#endif()

if(BUILD_PYVIENNACL)
   add_subdirectory(external/boost_numpy)
   add_subdirectory(pyviennacl)
endif()

#add_subdirectory(libviennacl)

if(BUILD_TESTING)
   add_subdirectory(tests)
endif()

#add_subdirectory(doc)

#add_subdirectory(libviennacl)

# Install
#########

#install(DIRECTORY viennacl ${CMAKE_CURRENT_BINARY_DIR}/viennacl
#   DESTINATION ${INSTALL_INCLUDE_DIR} COMPONENT dev
#   FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp")
